name: CLI Tool CI/CD

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.10", "3.11"]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run CLI help command (smoke test)
      run: |
        python wintool.py --help
        
    - name: Lint code
      run: |
        pip install flake8
        flake8 wintool.py --max-line-length=120 --ignore=E501,W503
        
    - name: Run unit tests
      run: |
        if [ -f test_wintool.py ]; then
          pip install pytest
          pytest -v test_wintool.py
        else
          echo "No tests found, skipping test step"
        fi
        
  package-and-release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
        
    - name: Install packaging tools
      run: |
        pip install setuptools wheel twine pyinstaller
        
    - name: Build Python package
      run: |
        python setup.py sdist bdist_wheel
        
    - name: Create standalone executable
      run: |
        pyinstaller --onefile --name wintool wintool.py
        
    - name: Test executable
      run: |
        ./dist/wintool --version || ./dist/wintool.exe --version
        
    - name: Create release archive
      run: |
        mkdir release
        cp dist/wintool* release/
        cp wintool.py release/
        cp README.md release/
        tar -czvf wintool-cli-${{ github.run_number }}.tar.gz release/
        
    - name: Upload to GitHub Releases
      uses: softprops/action-gh-release@v1
      with:
        files: |
          wintool-cli-${{ github.run_number }}.tar.gz
          dist/wintool*
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: Automated build of wintool CLI
        
    - name: Publish to PyPI
      if: ${{ success() }}
      run: |
        twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
